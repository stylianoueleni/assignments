#BlueJ class context
comment0.target=AbstractTree
comment0.text=\r\n\ An\ abstract\ base\ class\ providing\ some\ functionality\ of\ the\ Tree\ interface.\r\n\r\n\ The\ following\ three\ methods\ remain\ abstract,\ and\ must\ be\r\n\ implemented\ by\ a\ concrete\ subclass\:\ root,\ parent,\ children.\ Other\r\n\ methods\ implemented\ in\ this\ class\ may\ be\ overridden\ to\ provide\ a\r\n\ more\ direct\ and\ efficient\ implementation.\r\n\r\n\ @author\ Michael\ T.\ Goodrich\r\n\ @author\ Roberto\ Tamassia\r\n\ @author\ Michael\ H.\ Goldwasser\r\n
comment1.params=p
comment1.target=boolean\ isInternal(Position)
comment1.text=\r\n\ Returns\ true\ if\ Position\ p\ has\ one\ or\ more\ children.\r\n\r\n\ @param\ p\ \ \ \ A\ valid\ Position\ within\ the\ tree\r\n\ @return\ true\ if\ p\ has\ at\ least\ one\ child,\ false\ otherwise\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree.\r\n
comment10.params=
comment10.target=java.util.Iterator\ iterator()
comment10.text=\r\n\ Returns\ an\ iterator\ of\ the\ elements\ stored\ in\ the\ tree.\r\n\ @return\ iterator\ of\ the\ tree's\ elements\r\n
comment11.params=
comment11.target=java.lang.Iterable\ positions()
comment11.text=\r\n\ Returns\ an\ iterable\ collection\ of\ the\ positions\ of\ the\ tree.\r\n\ @return\ iterable\ collection\ of\ the\ tree's\ positions\r\n
comment12.params=p\ snapshot
comment12.target=void\ preorderSubtree(Position,\ java.util.List)
comment12.text=\r\n\ Adds\ positions\ of\ the\ subtree\ rooted\ at\ Position\ p\ to\ the\ given\r\n\ snapshot\ using\ a\ preorder\ traversal\r\n\ @param\ p\ \ \ \ \ \ \ Position\ serving\ as\ the\ root\ of\ a\ subtree\r\n\ @param\ snapshot\ \ a\ list\ to\ which\ results\ are\ appended\r\n
comment13.params=
comment13.target=java.lang.Iterable\ preorder()
comment13.text=\r\n\ Returns\ an\ iterable\ collection\ of\ positions\ of\ the\ tree,\ reported\ in\ preorder.\r\n\ @return\ iterable\ collection\ of\ the\ tree's\ positions\ in\ preorder\r\n
comment14.params=p\ snapshot
comment14.target=void\ postorderSubtree(Position,\ java.util.List)
comment14.text=\r\n\ Adds\ positions\ of\ the\ subtree\ rooted\ at\ Position\ p\ to\ the\ given\r\n\ snapshot\ using\ a\ postorder\ traversal\r\n\ @param\ p\ \ \ \ \ \ \ Position\ serving\ as\ the\ root\ of\ a\ subtree\r\n\ @param\ snapshot\ \ a\ list\ to\ which\ results\ are\ appended\r\n
comment15.params=
comment15.target=java.lang.Iterable\ postorder()
comment15.text=\r\n\ Returns\ an\ iterable\ collection\ of\ positions\ of\ the\ tree,\ reported\ in\ postorder.\r\n\ @return\ iterable\ collection\ of\ the\ tree's\ positions\ in\ postorder\r\n
comment2.params=p
comment2.target=boolean\ isExternal(Position)
comment2.text=\r\n\ Returns\ true\ if\ Position\ p\ does\ not\ have\ any\ children.\r\n\r\n\ @param\ p\ \ \ \ A\ valid\ Position\ within\ the\ tree\r\n\ @return\ true\ if\ p\ has\ zero\ children,\ false\ otherwise\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree.\r\n
comment3.params=p
comment3.target=boolean\ isRoot(Position)
comment3.text=\r\n\ Returns\ true\ if\ Position\ p\ represents\ the\ root\ of\ the\ tree.\r\n\r\n\ @param\ p\ \ \ \ A\ valid\ Position\ within\ the\ tree\r\n\ @return\ true\ if\ p\ is\ the\ root\ of\ the\ tree,\ false\ otherwise\r\n
comment4.params=p
comment4.target=int\ numChildren(Position)
comment4.text=\r\n\ Returns\ the\ number\ of\ children\ of\ Position\ p.\r\n\r\n\ @param\ p\ \ \ \ A\ valid\ Position\ within\ the\ tree\r\n\ @return\ number\ of\ children\ of\ Position\ p\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree.\r\n
comment5.params=
comment5.target=int\ size()
comment5.text=\r\n\ Returns\ the\ number\ of\ nodes\ in\ the\ tree.\r\n\ @return\ number\ of\ nodes\ in\ the\ tree\r\n
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\r\n\ Tests\ whether\ the\ tree\ is\ empty.\r\n\ @return\ true\ if\ the\ tree\ is\ empty,\ false\ otherwise\r\n
comment7.params=p
comment7.target=int\ depth(Position)
comment7.text=\ Returns\ the\ number\ of\ levels\ separating\ Position\ p\ from\ the\ root.\r\n\r\n\ @param\ p\ A\ valid\ Position\ within\ the\ tree\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree.\r\n
comment8.params=
comment8.target=int\ heightBad()
comment8.text=\ Returns\ the\ height\ of\ the\ tree.\r\n\r\n\ Note\:\ This\ implementation\ works,\ but\ runs\ in\ O(n^2)\ worst-case\ time.\r\n
comment9.params=p
comment9.target=int\ height(Position)
comment9.text=\r\n\ Returns\ the\ height\ of\ the\ subtree\ rooted\ at\ Position\ p.\r\n\r\n\ @param\ p\ A\ valid\ Position\ within\ the\ tree\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree.\r\n
numComments=16
