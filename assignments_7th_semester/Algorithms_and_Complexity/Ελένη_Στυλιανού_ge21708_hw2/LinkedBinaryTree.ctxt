#BlueJ class context
comment0.target=LinkedBinaryTree
comment0.text=\r\n\ Concrete\ implementation\ of\ a\ binary\ tree\ using\ a\ node-based,\ linked\ structure.\r\n\r\n\ @author\ Michael\ T.\ Goodrich\r\n\ @author\ Roberto\ Tamassia\r\n\ @author\ Michael\ H.\ Goldwasser\r\n
comment1.params=e\ freq\ parent\ left\ right
comment1.target=LinkedBinaryTree.Node\ createNode(java.lang.Object,\ float,\ LinkedBinaryTree.Node,\ LinkedBinaryTree.Node,\ LinkedBinaryTree.Node)
comment1.text=Factory\ function\ to\ create\ a\ new\ node\ storing\ element\ e.
comment10.params=p\ e\ freq
comment10.target=Position\ addLeft(Position,\ java.lang.Object,\ float)
comment10.text=\r\n\ Creates\ a\ new\ left\ child\ of\ Position\ p\ storing\ element\ e\ and\ returns\ its\ Position.\r\n\r\n\ @param\ p\ \ \ the\ Position\ to\ the\ left\ of\ which\ the\ new\ element\ is\ inserted\r\n\ @param\ e\ \ \ the\ new\ element\r\n\ @return\ the\ Position\ of\ the\ new\ element\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree\r\n\ @throws\ IllegalArgumentException\ if\ p\ already\ has\ a\ left\ child\r\n
comment11.params=p\ e\ freq
comment11.target=Position\ addRight(Position,\ java.lang.Object,\ float)
comment11.text=\r\n\ Creates\ a\ new\ right\ child\ of\ Position\ p\ storing\ element\ e\ and\ returns\ its\ Position.\r\n\r\n\ @param\ p\ \ \ the\ Position\ to\ the\ right\ of\ which\ the\ new\ element\ is\ inserted\r\n\ @param\ e\ \ \ the\ new\ element\r\n\ @return\ the\ Position\ of\ the\ new\ element\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree.\r\n\ @throws\ IllegalArgumentException\ if\ p\ already\ has\ a\ right\ child\r\n
comment12.params=p\ e\ freq
comment12.target=java.lang.Object\ set(Position,\ java.lang.Object,\ float)
comment12.text=\r\n\ Replaces\ the\ element\ at\ Position\ p\ with\ element\ e\ and\ returns\ the\ replaced\ element.\r\n\r\n\ @param\ p\ \ \ the\ relevant\ Position\r\n\ @param\ e\ \ \ the\ new\ element\r\n\ @return\ the\ replaced\ element\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree.\r\n
comment13.params=p\ t1\ t2
comment13.target=void\ attach(Position,\ LinkedBinaryTree,\ LinkedBinaryTree)
comment13.text=\r\n\ Attaches\ trees\ t1\ and\ t2,\ respectively,\ as\ the\ left\ and\ right\ subtree\ of\ the\r\n\ leaf\ Position\ p.\ As\ a\ side\ effect,\ t1\ and\ t2\ are\ set\ to\ empty\ trees.\r\n\r\n\ @param\ p\ \ \ a\ leaf\ of\ the\ tree\r\n\ @param\ t1\ \ an\ independent\ tree\ whose\ structure\ becomes\ the\ left\ child\ of\ p\r\n\ @param\ t2\ \ an\ independent\ tree\ whose\ structure\ becomes\ the\ right\ child\ of\ p\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ leaf\r\n
comment14.params=p
comment14.target=java.lang.Object\ remove(Position)
comment14.text=\r\n\ Removes\ the\ node\ at\ Position\ p\ and\ replaces\ it\ with\ its\ child,\ if\ any.\r\n\r\n\ @param\ p\ \ \ the\ relevant\ Position\r\n\ @return\ element\ that\ was\ removed\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree.\r\n\ @throws\ IllegalArgumentException\ if\ p\ has\ two\ children.\r\n
comment15.params=p
comment15.target=void\ printSubtree(Position)
comment16.params=p
comment16.target=float\ getFrequency(Position)
comment17.params=pp\ qq
comment17.target=void\ swap(Position,\ Position)
comment17.text=\r\n\ swap\ the\ two\ nodes\ (and\ their\ subtrees)\ in\ the\ tree\r\n\ the\ two\ nodes\ must\ be\ internal\r\n
comment2.params=
comment2.target=LinkedBinaryTree()
comment2.text=Construts\ an\ empty\ binary\ tree.
comment3.params=p
comment3.target=LinkedBinaryTree.Node\ validate(Position)
comment3.text=\r\n\ Verifies\ that\ a\ Position\ belongs\ to\ the\ appropriate\ class,\ and\ is\r\n\ not\ one\ that\ has\ been\ previously\ removed.\ Note\ that\ our\ current\r\n\ implementation\ does\ not\ actually\ verify\ that\ the\ position\ belongs\r\n\ to\ this\ particular\ list\ instance.\r\n\r\n\ @param\ p\ \ \ a\ Position\ (that\ should\ belong\ to\ this\ tree)\r\n\ @return\ \ \ \ the\ underlying\ Node\ instance\ for\ the\ position\r\n\ @throws\ IllegalArgumentException\ if\ an\ invalid\ position\ is\ detected\r\n
comment4.params=
comment4.target=int\ size()
comment4.text=\r\n\ Returns\ the\ number\ of\ nodes\ in\ the\ tree.\r\n\ @return\ number\ of\ nodes\ in\ the\ tree\r\n
comment5.params=
comment5.target=Position\ root()
comment5.text=\r\n\ Returns\ the\ root\ Position\ of\ the\ tree\ (or\ null\ if\ tree\ is\ empty).\r\n\ @return\ root\ Position\ of\ the\ tree\ (or\ null\ if\ tree\ is\ empty)\r\n
comment6.params=p
comment6.target=Position\ parent(Position)
comment6.text=\r\n\ Returns\ the\ Position\ of\ p's\ parent\ (or\ null\ if\ p\ is\ root).\r\n\r\n\ @param\ p\ \ \ \ A\ valid\ Position\ within\ the\ tree\r\n\ @return\ Position\ of\ p's\ parent\ (or\ null\ if\ p\ is\ root)\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree.\r\n
comment7.params=p
comment7.target=Position\ left(Position)
comment7.text=\r\n\ Returns\ the\ Position\ of\ p's\ left\ child\ (or\ null\ if\ no\ child\ exists).\r\n\r\n\ @param\ p\ A\ valid\ Position\ within\ the\ tree\r\n\ @return\ the\ Position\ of\ the\ left\ child\ (or\ null\ if\ no\ child\ exists)\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree\r\n
comment8.params=p
comment8.target=Position\ right(Position)
comment8.text=\r\n\ Returns\ the\ Position\ of\ p's\ right\ child\ (or\ null\ if\ no\ child\ exists).\r\n\r\n\ @param\ p\ A\ valid\ Position\ within\ the\ tree\r\n\ @return\ the\ Position\ of\ the\ right\ child\ (or\ null\ if\ no\ child\ exists)\r\n\ @throws\ IllegalArgumentException\ if\ p\ is\ not\ a\ valid\ Position\ for\ this\ tree\r\n
comment9.params=e\ freq
comment9.target=Position\ addRoot(java.lang.Object,\ float)
comment9.text=\r\n\ Places\ element\ e\ at\ the\ root\ of\ an\ empty\ tree\ and\ returns\ its\ new\ Position.\r\n\r\n\ @param\ e\ \ \ the\ new\ element\r\n\ @return\ the\ Position\ of\ the\ new\ element\r\n\ @throws\ IllegalStateException\ if\ the\ tree\ is\ not\ empty\r\n
numComments=18
